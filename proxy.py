import socket
import argparse

def udp_proxy(listen_ip, listen_port, target_ip, target_port):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç UDP-–ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((listen_ip, listen_port))
    sock.settimeout(5)  # –¢–∞–π–º–∞—É—Ç –≤ 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–∞—Ç—å –Ω–∞ recvfrom()

    print(f"üî• Proxy server listening on {listen_ip}:{listen_port} ‚Üí Forwarding to {target_ip}:{target_port}")

    try:
        while True:
            try:
                data, addr = sock.recvfrom(1024)
            except socket.timeout:
                continue  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –∂–¥–µ–º –¥–∞–ª—å—à–µ

            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –ø–∞–∫–µ—Ç—ã
            if not data.strip():
                continue

            print(f"üì• Received '{data.decode('utf-8', errors='ignore')}' from {addr} ‚Üí Forwarding to {target_ip}:{target_port}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
            try:
                sock.sendto(data, (target_ip, target_port))
                print(f"üì§ Sent '{data.decode('utf-8', errors='ignore')}' to {target_ip}:{target_port}")
            except OSError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                # For macOS –∏ Linux
                #if e.errno == 10051:
                # For Windows
                if e.winerror == 10051:
                    print("üö® –ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏, –º–∞—Ä—à—Ä—É—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞!")
                continue

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            try:
                response, target_addr = sock.recvfrom(1024)
                print(f"üì§ Response '{response.decode('utf-8', errors='ignore')}' from {target_addr} ‚Üí Sending back to {addr}")
                sock.sendto(response, addr)
            except socket.timeout:
                print("‚è≥ –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

    except KeyboardInterrupt:
        print("\nüö™ –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω (Ctrl + C). –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç...")

    finally:
        sock.close()
        print("‚úÖ –ü–æ—Ä—Ç –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω. –í—ã—Ö–æ–¥.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Simple UDP Proxy")
    parser.add_argument("--listen-ip", default="127.0.0.1", help="IP –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 127.0.0.1)")
    parser.add_argument("--listen-port", type=int, default=9999, help="–ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 9999)")
    parser.add_argument("--target-ip", required=True, help="–¶–µ–ª–µ–≤–æ–π IP –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–∞–∫–µ—Ç–æ–≤")
    parser.add_argument("--target-port", type=int, required=True, help="–¶–µ–ª–µ–≤–æ–π –ø–æ—Ä—Ç")

    args = parser.parse_args()
    udp_proxy(args.listen_ip, args.listen_port, args.target_ip, args.target_port)
