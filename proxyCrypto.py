import socket
import argparse
from cryptography.fernet import Fernet


def udp_proxy(listen_ip, listen_port, target_ip, target_port, encryption_key=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç UDP-–ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–æ–π –∏ VDS"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Fernet —Å –∫–ª—é—á–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    cipher = None
    if encryption_key:
        cipher = Fernet(encryption_key)

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((listen_ip, listen_port))
    sock.settimeout(5)  # –¢–∞–π–º–∞—É—Ç –≤ 5 —Å–µ–∫—É–Ω–¥

    print(f"üî• Proxy server listening on {listen_ip}:{listen_port} ‚Üí Forwarding to {target_ip}:{target_port}")
    if cipher:
        print(f"üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
    clients = {}

    try:
        while True:
            try:
                data, addr = sock.recvfrom(1024)
            except socket.timeout:
                continue

            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –ø–∞–∫–µ—Ç—ã
            if not data.strip():
                continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            clients[addr] = True

            print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ '{data.decode('utf-8', errors='ignore')}' –æ—Ç {addr}")

            # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ VDS
            if cipher:
                try:
                    encrypted_data = cipher.encrypt(data)
                    print(f"üîí –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã: {encrypted_data[:20]}...")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    continue
            else:
                encrypted_data = data

            try:
                sock.sendto(encrypted_data, (target_ip, target_port))
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ VDS {target_ip}:{target_port}")
            except OSError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                continue

            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç VDS
            try:
                encrypted_response, target_addr = sock.recvfrom(1024)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à–µ–ª –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                if target_addr[0] != target_ip or target_addr[1] != target_port:
                    print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {target_addr}")
                    continue

                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç VDS
                if cipher:
                    try:
                        response = cipher.decrypt(encrypted_response)
                        print(f"üîì –û—Ç–≤–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
                        continue
                else:
                    response = encrypted_response

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –∫–ª–∏–µ–Ω—Ç—É
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç '{response.decode('utf-8', errors='ignore')}' –∫–ª–∏–µ–Ω—Ç—É {addr}")
                sock.sendto(response, addr)

            except socket.timeout:
                print("‚è≥ VDS –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥")

    except KeyboardInterrupt:
        print("\nüö™ –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω (Ctrl + C)")

    finally:
        sock.close()
        print("‚úÖ –ü–æ—Ä—Ç –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω. –í—ã—Ö–æ–¥.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="UDP Proxy —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ VDS")
    parser.add_argument("--listen-ip", default="0.0.0.0", help="IP –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.0.0.0)")
    parser.add_argument("--listen-port", type=int, default=9999, help="–ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 9999)")
    parser.add_argument("--target-ip", required=True, help="IP VDS —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--target-port", type=int, required=True, help="–ü–æ—Ä—Ç VDS —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--key", help="–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)")
    parser.add_argument("--generate-key", action="store_true", help="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")

    args = parser.parse_args()

    encryption_key = None
    if args.generate_key:
        encryption_key = Fernet.generate_key()
        print(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á: {encryption_key.decode()}")
    elif args.key:
        encryption_key = args.key.encode()

    udp_proxy(args.listen_ip, args.listen_port, args.target_ip, args.target_port, encryption_key)