import socket
import argparse
from cryptography.fernet import Fernet


def run_server(host, port, encryption_key=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç UDP —Å–µ—Ä–≤–µ—Ä –Ω–∞ VDS —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Fernet —Å –∫–ª—é—á–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    cipher = None
    if encryption_key:
        cipher = Fernet(encryption_key)

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    server_socket.bind((host, port))

    print(f"‚úÖ VDS UDP Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ {host}:{port}")
    if cipher:
        print(f"üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")

    while True:
        try:
            encrypted_data, addr = server_socket.recvfrom(4096)
            print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –ø—Ä–æ–∫—Å–∏ {addr}")

            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if cipher:
                try:
                    data = cipher.decrypt(encrypted_data)
                    print(f"üîì –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
                    continue
            else:
                data = encrypted_data

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            decoded_data = data.decode("utf-8", errors="replace")
            print(f"üìù –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {decoded_data}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"–û—Ç–≤–µ—Ç –æ—Ç VDS —Å–µ—Ä–≤–µ—Ä–∞: {decoded_data}".encode("utf-8")

            # –®–∏—Ñ—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ø—Ä–æ–∫—Å–∏
            if cipher:
                try:
                    encrypted_response = cipher.encrypt(response)
                    print(f"üîí –û—Ç–≤–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
                    continue
            else:
                encrypted_response = response

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ø—Ä–æ–∫—Å–∏
            server_socket.sendto(encrypted_response, addr)
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–∫—Å–∏ {addr}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="VDS UDP Server —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º")
    parser.add_argument("--host", default="0.0.0.0", help="IP –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.0.0.0)")
    parser.add_argument("--port", type=int, default=8888, help="–ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8888)")
    parser.add_argument("--key", help="–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)")

    args = parser.parse_args()

    encryption_key = None
    if args.key:
        encryption_key = args.key.encode()

    run_server(args.host, args.port, encryption_key)